{
	"info": {
		"_postman_id": "618a0d9a-5a2b-4bf5-8785-4c2e00355c65",
		"name": "Integration tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST",
			"item": [
				{
					"name": "Holiday",
					"item": [
						{
							"name": "Successfully create Holiday",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"holiday_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/holiday?name=Easter&startDate=2020-03-01&endDate=2020-03-02",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"holiday"
									],
									"query": [
										{
											"key": "name",
											"value": "Easter"
										},
										{
											"key": "startDate",
											"value": "2020-03-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-02"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to create Holiday with missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/holiday?startDate=2020-03-01&endDate=2020-03-02",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"holiday"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2020-03-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-02"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibraryOpeningHours",
					"item": [
						{
							"name": "Successfully create LOH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"LOH_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/libraryOpeningHours?date={{LOH_DATE}}&startTime=10:00:00&endTime=17:00:00",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"libraryOpeningHours"
									],
									"query": [
										{
											"key": "date",
											"value": "{{LOH_DATE}}"
										},
										{
											"key": "startTime",
											"value": "10:00:00"
										},
										{
											"key": "endTime",
											"value": "17:00:00"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to create LOH with missing date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/libraryOpeningHours?startTime=10:00:00&endTime=17:00:00",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"libraryOpeningHours"
									],
									"query": [
										{
											"key": "startTime",
											"value": "10:00:00"
										},
										{
											"key": "endTime",
											"value": "17:00:00"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibrarianShift",
					"item": [
						{
							"name": "Add Temporary Librarian",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"librarian_id_for_shift\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/librarian?fullName=Jocasta Nu&username=joacasta.nu&password=securepassword12345",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian"
									],
									"query": [
										{
											"key": "fullName",
											"value": "Jocasta Nu"
										},
										{
											"key": "username",
											"value": "joacasta.nu"
										},
										{
											"key": "password",
											"value": "securepassword12345"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully create LS Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"librarian_shift_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/librarianShift?date=2020-03-01&startTime=10:00:00&endTime=17:00:00&librarianId={{librarian_id_for_shift}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarianShift"
									],
									"query": [
										{
											"key": "date",
											"value": "2020-03-01"
										},
										{
											"key": "startTime",
											"value": "10:00:00"
										},
										{
											"key": "endTime",
											"value": "17:00:00"
										},
										{
											"key": "librarianId",
											"value": "{{librarian_id_for_shift}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to create LS with missing date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/librarianShift?startTime=10:00:00&endTime=17:00:00&librarianId={{librarian_id_for_shift}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarianShift"
									],
									"query": [
										{
											"key": "startTime",
											"value": "10:00:00"
										},
										{
											"key": "endTime",
											"value": "17:00:00"
										},
										{
											"key": "librarianId",
											"value": "{{librarian_id_for_shift}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Member",
					"item": [
						{
							"name": "Successfully create member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"member_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"Obi-Wan Kenobi\",\r\n    \"address\": \"212 McGill Street\",\r\n    \"isCitizen\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/member",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to create member with empty name and address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"\",\r\n    \"address\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/member",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully activate member account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/{{member_id}}/activate",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"{{member_id}}",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to activate member account with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/9999999/activate",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"9999999",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully create online account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const username = pm.variables.replaceIn('{{member_username}}')\r",
											"pm.test(\"Online account username is correct\", function () {\r",
											"    pm.expect(jsonData.username).to.eql(username);\r",
											"});\r",
											"const emailAddress = pm.variables.replaceIn('{{member_email_address}}')\r",
											"pm.test(\"Online account email address is correct\", function () {\r",
											"    pm.expect(jsonData.emailAddress).to.eql(emailAddress);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const username = pm.variables.replaceIn('{{$guid}}')\r",
											"pm.collectionVariables.set(\"member_username\", username)\r",
											"const emailAddress = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"member_email_address\", emailAddress)\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"member_password\", password)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{member_username}}\",\r\n    \"emailAddress\": \"{{member_email_address}}\",\r\n    \"password\": \"{{member_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/member/{{member_id}}/onlineAccount",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"{{member_id}}",
										"onlineAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to create online account with empty username, password, and email address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"emailAddress\": \"\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/member/{{member_id}}/onlineAccount",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"{{member_id}}",
										"onlineAccount"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Librarian",
					"item": [
						{
							"name": "Successfully create librarian",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"librarian_id\", jsonData.id);\r",
											"\r",
											"const expectedUsername = pm.variables.replaceIn('{{librarian_username}}')\r",
											"pm.test(\"Librarian username is correct\", function () {\r",
											"    pm.expect(jsonData.username).to.eql(expectedUsername);\r",
											"});\r",
											"\r",
											"const expectedFullName = pm.variables.replaceIn('{{librarian_full_name}}')\r",
											"pm.test(\"Librarian full name is correct\", function () {\r",
											"    pm.expect(jsonData.fullName).to.eql(expectedFullName);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const fullName = \"Test Librarian\"\r",
											"pm.collectionVariables.set(\"librarian_full_name\", fullName)\r",
											"const username = pm.variables.replaceIn('{{$guid}}')\r",
											"pm.collectionVariables.set(\"librarian_username\", username)\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"librarian_password\", password)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian?fullName={{librarian_full_name}}&username={{librarian_username}}&password={{librarian_password}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian"
									],
									"query": [
										{
											"key": "fullName",
											"value": "{{librarian_full_name}}"
										},
										{
											"key": "username",
											"value": "{{librarian_username}}"
										},
										{
											"key": "password",
											"value": "{{librarian_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully create 2nd librarian",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"librarian2_id\", jsonData.id);\r",
											"pm.collectionVariables.set(\"librarian2_username\", jsonData.username);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian?fullName=Test Librarian&username={{$guid}}&password=test-librarian-password",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian"
									],
									"query": [
										{
											"key": "fullName",
											"value": "Test Librarian"
										},
										{
											"key": "username",
											"value": "{{$guid}}"
										},
										{
											"key": "password",
											"value": "test-librarian-password"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to create librarian with empty name, username, and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian?fullName=  &username=  &password=  ",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian"
									],
									"query": [
										{
											"key": "fullName",
											"value": "  "
										},
										{
											"key": "username",
											"value": "  "
										},
										{
											"key": "password",
											"value": "  "
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibraryItemInfo",
					"item": [
						{
							"name": "Successfully creates a bookInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"bookInfo_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/bookInfo/title/?numberOfPage=134&author=anAuthor&isbn={{$randomInt}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"bookInfo",
										"title",
										""
									],
									"query": [
										{
											"key": "numberOfPage",
											"value": "134"
										},
										{
											"key": "author",
											"value": "anAuthor"
										},
										{
											"key": "isbn",
											"value": "{{$randomInt}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create a bookInfo with numberOfPage = 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/bookInfo/title/?numberOfPage=0&author=anAuthor&isbn={{$randomInt}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"bookInfo",
										"title",
										""
									],
									"query": [
										{
											"key": "numberOfPage",
											"value": "0"
										},
										{
											"key": "author",
											"value": "anAuthor"
										},
										{
											"key": "isbn",
											"value": "{{$randomInt}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully creates a movieInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"movieInfo_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/movieInfo/?genre=aGenre&description=aDescritption&director=Adirector&length=67",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"movieInfo",
										""
									],
									"query": [
										{
											"key": "genre",
											"value": "aGenre"
										},
										{
											"key": "description",
											"value": "aDescritption"
										},
										{
											"key": "director",
											"value": "Adirector"
										},
										{
											"key": "length",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create a movieInfo with missing argument (genre)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/movieInfo/?description=aDescritption&director=Adirector&length=67",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"movieInfo",
										""
									],
									"query": [
										{
											"key": "description",
											"value": "aDescritption"
										},
										{
											"key": "director",
											"value": "Adirector"
										},
										{
											"key": "length",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create a movie with invalid movieInfo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/movie/9999999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"movie",
										"9999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully create an albumInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"albumInfo_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/albumInfo/title/?composerPerformer=aComposerPerformer&genre=aGenre",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"albumInfo",
										"title",
										""
									],
									"query": [
										{
											"key": "composerPerformer",
											"value": "aComposerPerformer"
										},
										{
											"key": "genre",
											"value": "aGenre"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create an albumInfo with empty genre",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/albumInfo/title/?composerPerformer=aComposerPerformer&genre=",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"albumInfo",
										"title",
										""
									],
									"query": [
										{
											"key": "composerPerformer",
											"value": "aComposerPerformer"
										},
										{
											"key": "genre",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create an album with invalid id for albumInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/album/9999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"album",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sucessfully creates a newpaperInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"newspaperInfo_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/newsPaperInfo/?publication=2021-12-12&frequency=aFrequency&number=0",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"newsPaperInfo",
										""
									],
									"query": [
										{
											"key": "publication",
											"value": "2021-12-12"
										},
										{
											"key": "frequency",
											"value": "aFrequency"
										},
										{
											"key": "number",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create a newspaperInfo with empty number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/newsPaperInfo/?publication=2021-12-12&frequency=aFrequency&number=",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"newsPaperInfo",
										""
									],
									"query": [
										{
											"key": "publication",
											"value": "2021-12-12"
										},
										{
											"key": "frequency",
											"value": "aFrequency"
										},
										{
											"key": "number",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully create an archiveInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"archiveInfo_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/archiveInfo/title/?description=aDescription&publicationDate=2021-12-12",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"archiveInfo",
										"title",
										""
									],
									"query": [
										{
											"key": "description",
											"value": "aDescription"
										},
										{
											"key": "publicationDate",
											"value": "2021-12-12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create an archiveInfo with missing publication date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/archiveInfo/title/?description=aDescription",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"archiveInfo",
										"title",
										""
									],
									"query": [
										{
											"key": "description",
											"value": "aDescription"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibraryItem",
					"item": [
						{
							"name": "Successfully create a book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"book_id\", jsonData.id);\r",
											"\r",
											"console.log(pm.collectionVariables.get(\"book_id\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/book/{{bookInfo_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"book",
										"{{bookInfo_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create a book with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/book/9999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"book",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully creates a movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"movie_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/movie/{{movieInfo_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"movie",
										"{{movieInfo_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully creates an album",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"album_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/album/{{albumInfo_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"album",
										"{{albumInfo_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully creates a newspaper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"newspaper_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/newspaper/{{newspaperInfo_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"newspaper",
										"{{newspaperInfo_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create a newspaper with invalid newspaperInfo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/newspaper/9999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"newspaper",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully creates an archive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"archive_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/archive/{{archiveInfo_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"archive",
										"{{archiveInfo_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to create an archive with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/archive/9999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"archive",
										"9999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Loan",
					"item": [
						{
							"name": "Successfully creates a loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"loan_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/{{book_id}}/loan?memberId={{member_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"{{book_id}}",
										"loan"
									],
									"query": [
										{
											"key": "memberId",
											"value": "{{member_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to create a loan with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"loan_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/999999/loan?memberId={{member_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"999999",
										"loan"
									],
									"query": [
										{
											"key": "memberId",
											"value": "{{member_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reservation",
					"item": [
						{
							"name": "Successfully create reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"reservation_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservation?memberId={{member_id}}&reservableItemId={{bookInfo_id}}&date=2021-11-11",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservation"
									],
									"query": [
										{
											"key": "memberId",
											"value": "{{member_id}}"
										},
										{
											"key": "reservableItemId",
											"value": "{{bookInfo_id}}"
										},
										{
											"key": "date",
											"value": "2021-11-11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to create reservation with invalid member and item ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservation?memberId=9999999&reservableItemId=9999999&date=2021-11-11",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservation"
									],
									"query": [
										{
											"key": "memberId",
											"value": "9999999"
										},
										{
											"key": "reservableItemId",
											"value": "9999999"
										},
										{
											"key": "date",
											"value": "2021-11-11"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "Holiday",
					"item": [
						{
							"name": "Get holiday by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Holiday ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.eql(pm.collectionVariables.get(\"holiday_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/holiday/2020-03-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"holiday",
										"2020-03-01"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get holiday by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an empty list.\", function () {",
											"    var res = pm.response.json();",
											"    pm.expect(res.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/holiday/2019-03-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"holiday",
										"2019-03-01"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get holiday by start and end dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Holiday ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.eql(pm.collectionVariables.get(\"holiday_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/holiday/2020-02-01/2020-04-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"holiday",
										"2020-02-01",
										"2020-04-01"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get holiday by start and end dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an empty list.\", function () {",
											"    var res = pm.response.json();",
											"    pm.expect(res.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/holiday/2019-04-01/2020-02-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"holiday",
										"2019-04-01",
										"2020-02-01"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibraryOpeningHours",
					"item": [
						{
							"name": "Get LOH by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Holiday ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.eql(pm.collectionVariables.get(\"LOH_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/libraryOpeningHours/{{LOH_DATE}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"libraryOpeningHours",
										"{{LOH_DATE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get LOH by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an empty list.\", function () {",
											"    var res = pm.response.json();",
											"    pm.expect(res.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/libraryOpeningHours/2019-03-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"libraryOpeningHours",
										"2019-03-01"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get LOH by start and end dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Holiday ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.eql(pm.collectionVariables.get(\"LOH_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/libraryOpeningHours/2020-02-01/2020-04-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"libraryOpeningHours",
										"2020-02-01",
										"2020-04-01"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get LOH by start and end dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/libraryOpeningHours/2020-04-01/2020-02-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"libraryOpeningHours",
										"2020-04-01",
										"2020-02-01"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibrarianShift",
					"item": [
						{
							"name": "Get LS by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Shift ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.eql(pm.collectionVariables.get(\"librarian_shift_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarianShift/2020-03-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarianShift",
										"2020-03-01"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get LS by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an empty list.\", function () {",
											"    var res = pm.response.json();",
											"    pm.expect(res.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarianShift/2019-03-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarianShift",
										"2019-03-01"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get LS by librarianId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Shift ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.eql(pm.collectionVariables.get(\"librarian_shift_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarianShift?librarianId={{librarian_id_for_shift}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarianShift"
									],
									"query": [
										{
											"key": "librarianId",
											"value": "{{librarian_id_for_shift}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get LS by librarianId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an empty list.\", function () {",
											"    var res = pm.response.json();",
											"    pm.expect(res.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarianShift?librarianId=-1",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarianShift"
									],
									"query": [
										{
											"key": "librarianId",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get LS by date & LibrarianID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Shift ID is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.eql(pm.collectionVariables.get(\"librarian_shift_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarianShift/{{librarian_id_for_shift}}/2020-03-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarianShift",
										"{{librarian_id_for_shift}}",
										"2020-03-01"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get LS by date & invalid librarianId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an empty list.\", function () {",
											"    var res = pm.response.json();",
											"    pm.expect(res.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarianShift/-1/2020-03-01",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarianShift",
										"-1",
										"2020-03-01"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Member",
					"item": [
						{
							"name": "Get member by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Member ID is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"member_id\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/{{member_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"{{member_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get member with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/9999999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"9999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully get all members",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/all",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully log in member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const memberId = pm.variables.replaceIn('{{member_id}}')\r",
											"pm.test(\"Member ID is correct\", function () {\r",
											"    pm.expect(jsonData.member.id.toString()).to.eql(memberId);\r",
											"});\r",
											"const username = pm.variables.replaceIn('{{member_username}}')\r",
											"pm.test(\"Online account username is correct\", function () {\r",
											"    pm.expect(jsonData.member.onlineAccount.username).to.eql(username);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/login?username={{member_username}}&password={{member_password}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{member_username}}"
										},
										{
											"key": "password",
											"value": "{{member_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to log in member with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/login?username={{member_username}}&password=short",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{member_username}}"
										},
										{
											"key": "password",
											"value": "short"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Librarian",
					"item": [
						{
							"name": "Successfully get librarian by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/{{librarian_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"{{librarian_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get librarian with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/9999999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"9999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully get librarian by username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian?username={{librarian_username}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian"
									],
									"query": [
										{
											"key": "username",
											"value": "{{librarian_username}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get librarian with invalid username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian?username={{$guid}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian"
									],
									"query": [
										{
											"key": "username",
											"value": "{{$guid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully get all librarians",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/all",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully get reservable item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/{{book_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"{{book_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get reservable item with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/999999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully log in librarian",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const expectedUsername = pm.variables.replaceIn('{{librarian_username}}')\r",
											"pm.test(\"Librarian username is correct\", function () {\r",
											"    pm.expect(jsonData.librarian.username).to.eql(expectedUsername);\r",
											"});\r",
											"\r",
											"const expectedFullName = pm.variables.replaceIn('{{librarian_full_name}}')\r",
											"pm.test(\"Librarian full name is correct\", function () {\r",
											"    pm.expect(jsonData.librarian.fullName).to.eql(expectedFullName);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/login?username={{librarian_username}}&password={{librarian_password}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{librarian_username}}"
										},
										{
											"key": "password",
											"value": "{{librarian_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to log in librarian with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/login?username={{librarian_username}}&password=short",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{librarian_username}}"
										},
										{
											"key": "password",
											"value": "short"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibraryItemInfo",
					"item": [
						{
							"name": "Successfully get associated item info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/{{book_id}}/itemInfo/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"{{book_id}}",
										"itemInfo",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get associated item info with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/999999/itemInfo/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"999999",
										"itemInfo",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully get all library item infos (browse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/browse",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"browse"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Loan",
					"item": [
						{
							"name": "Successfully gets the associated loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/{{book_id}}/loan",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"{{book_id}}",
										"loan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get the associated loan with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/999999/loan",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"999999",
										"loan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reservation",
					"item": [
						{
							"name": "Successfully get reservation by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservation/{{reservation_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservation",
										"{{reservation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get reservation with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservation/9999999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservation",
										"9999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully get reservation by member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/{{member_id}}/reservation",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"{{member_id}}",
										"reservation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get reservation with invalid member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/9999999/reservation",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"9999999",
										"reservation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully get reservation by reservable item ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItemInfo/{{bookInfo_id}}/reservation/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItemInfo",
										"{{bookInfo_id}}",
										"reservation",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get reservation with invalid reservable item ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItemInfo/9999999/reservation",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItemInfo",
										"9999999",
										"reservation"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "Member",
					"item": [
						{
							"name": "Successfully apply penalty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/{{member_id}}/applyPenalty",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"{{member_id}}",
										"applyPenalty"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to apply penalty for nonexistent member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/9999999/applyPenalty",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"9999999",
										"applyPenalty"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully remove penalty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/{{member_id}}/removePenalty",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"{{member_id}}",
										"removePenalty"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to remove penalty for nonexistent member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/9999999/removePenalty",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"9999999",
										"removePenalty"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Member successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/{{member_id}}?address=123 University street&fullName=Bob The Builder",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"{{member_id}}"
									],
									"query": [
										{
											"key": "address",
											"value": "123 University street"
										},
										{
											"key": "fullName",
											"value": "Bob The Builder"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to update Member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/member/9999999?address=123 University street&fullName=Bob The Builder",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"member",
										"9999999"
									],
									"query": [
										{
											"key": "address",
											"value": "123 University street"
										},
										{
											"key": "fullName",
											"value": "Bob The Builder"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Librarian",
					"item": [
						{
							"name": "Update Librarian successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/{{librarian_id}}?fullName=Bob The Builder&username=bob.builds&password=bobmakesgoodpasswords123456",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"{{librarian_id}}"
									],
									"query": [
										{
											"key": "fullName",
											"value": "Bob The Builder"
										},
										{
											"key": "username",
											"value": "bob.builds"
										},
										{
											"key": "password",
											"value": "bobmakesgoodpasswords123456"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to update Librarian",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/9999999?fullName=Bob The Builder&username=bob.builds&password=bobmakesgoodpasswords123456",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"9999999"
									],
									"query": [
										{
											"key": "fullName",
											"value": "Bob The Builder"
										},
										{
											"key": "username",
											"value": "bob.builds"
										},
										{
											"key": "password",
											"value": "bobmakesgoodpasswords123456"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibraryItemInfo",
					"item": [
						{
							"name": "Successfully update book info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/bookInfo/{{bookInfo_id}}?title=Updated book title&numberOfPage=100&author=Updated Author&isbn={{$randomInt}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"bookInfo",
										"{{bookInfo_id}}"
									],
									"query": [
										{
											"key": "title",
											"value": "Updated book title"
										},
										{
											"key": "numberOfPage",
											"value": "100"
										},
										{
											"key": "author",
											"value": "Updated Author"
										},
										{
											"key": "isbn",
											"value": "{{$randomInt}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to update book info with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/bookInfo/9999999?title=Updated book title&numberOfPage=100&author=Updated Author&isbn={{$randomInt}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"bookInfo",
										"9999999"
									],
									"query": [
										{
											"key": "title",
											"value": "Updated book title"
										},
										{
											"key": "numberOfPage",
											"value": "100"
										},
										{
											"key": "author",
											"value": "Updated Author"
										},
										{
											"key": "isbn",
											"value": "{{$randomInt}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully update movie info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/movieInfo/{{movieInfo_id}}?genre=Updated genre&director=Updated Director&length=120",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"movieInfo",
										"{{movieInfo_id}}"
									],
									"query": [
										{
											"key": "genre",
											"value": "Updated genre"
										},
										{
											"key": "director",
											"value": "Updated Director"
										},
										{
											"key": "length",
											"value": "120"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to update movie info with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/movieInfo/9999999?genre=Updated genre&director=Updated Director&length=120",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"movieInfo",
										"9999999"
									],
									"query": [
										{
											"key": "genre",
											"value": "Updated genre"
										},
										{
											"key": "director",
											"value": "Updated Director"
										},
										{
											"key": "length",
											"value": "120"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully update archive info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/archiveInfo/{{archiveInfo_id}}?title=Updated archive title&description=Updated description&publicationDate=2021-11-11",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"archiveInfo",
										"{{archiveInfo_id}}"
									],
									"query": [
										{
											"key": "title",
											"value": "Updated archive title"
										},
										{
											"key": "description",
											"value": "Updated description"
										},
										{
											"key": "publicationDate",
											"value": "2021-11-11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to update archive info with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/archiveInfo/9999999?title=Updated archive title&description=Updated description&publicationDate=2021-11-11",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"archiveInfo",
										"9999999"
									],
									"query": [
										{
											"key": "title",
											"value": "Updated archive title"
										},
										{
											"key": "description",
											"value": "Updated description"
										},
										{
											"key": "publicationDate",
											"value": "2021-11-11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully update newspaper info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/newspaperInfo/{{newspaperInfo_id}}?publicationDate=2021-11-11&frequency=Updated frequency&number=42",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"newspaperInfo",
										"{{newspaperInfo_id}}"
									],
									"query": [
										{
											"key": "publicationDate",
											"value": "2021-11-11"
										},
										{
											"key": "frequency",
											"value": "Updated frequency"
										},
										{
											"key": "number",
											"value": "42"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to update newspaper info with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/newspaperInfo/9999999?publicationDate=2021-11-11&frequency=Updated frequency&number=42",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"newspaperInfo",
										"9999999"
									],
									"query": [
										{
											"key": "publicationDate",
											"value": "2021-11-11"
										},
										{
											"key": "frequency",
											"value": "Updated frequency"
										},
										{
											"key": "number",
											"value": "42"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully update album info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/albumInfo/{{albumInfo_id}}?title=Updated Title&composerPerformer=Updated Composer Performer&genre=Updated genre",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"albumInfo",
										"{{albumInfo_id}}"
									],
									"query": [
										{
											"key": "title",
											"value": "Updated Title"
										},
										{
											"key": "composerPerformer",
											"value": "Updated Composer Performer"
										},
										{
											"key": "genre",
											"value": "Updated genre"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to update album info with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/albumInfo/9999999?title=Updated Title&composerPerformer=Updated Composer Performer&genre=Updated genre",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"albumInfo",
										"9999999"
									],
									"query": [
										{
											"key": "title",
											"value": "Updated Title"
										},
										{
											"key": "composerPerformer",
											"value": "Updated Composer Performer"
										},
										{
											"key": "genre",
											"value": "Updated genre"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "Holiday",
					"item": [
						{
							"name": "Delete holiday",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/holiday/{{holiday_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"holiday",
										"{{holiday_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to delete holiday with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/holiday/{{holiday_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"holiday",
										"{{holiday_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibraryOpeningHours",
					"item": [
						{
							"name": "Delete LOH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/libraryOpeningHours/{{LOH_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"libraryOpeningHours",
										"{{LOH_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to delete LOH with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/libraryOpeningHours/{{LOH_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"libraryOpeningHours",
										"{{LOH_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibrarianShift",
					"item": [
						{
							"name": "Delete LS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarianShift/{{librarian_shift_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarianShift",
										"{{librarian_shift_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to delete LS with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/libraryOpeningHours/{{librarian_shift_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"libraryOpeningHours",
										"{{librarian_shift_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Temporary Librarian",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/{{librarian_id_for_shift}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"{{librarian_id_for_shift}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Librarian",
					"item": [
						{
							"name": "Successfully delete librarian by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/{{librarian_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"{{librarian_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to delete librarian with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/{{librarian_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"{{librarian_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully delete librarian by username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/delete?username={{librarian2_username}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"delete"
									],
									"query": [
										{
											"key": "username",
											"value": "{{librarian2_username}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to delete librarian with invalid username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/librarian/delete?username={{librarian2_username}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"librarian",
										"delete"
									],
									"query": [
										{
											"key": "username",
											"value": "{{librarian2_username}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Loan",
					"item": [
						{
							"name": "Successfully deletes a loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/{{book_id}}/loan",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"{{book_id}}",
										"loan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to get deleted loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/{{book_id}}/loan",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"{{book_id}}",
										"loan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to delete a loan with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservableItem/999999/loan",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservableItem",
										"999999",
										"loan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LibraryItem",
					"item": [
						{
							"name": "Successfully delete a book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(pm.collectionVariables.get(\"book_id\"));\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/book/{{book_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"book",
										"{{book_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to delete a book with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/book/9999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"book",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully deletes a movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/movie/{{movie_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"movie",
										"{{movie_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to delete a movie with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/movie/9999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"movie",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Succefully deletes an album",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/album/{{album_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"album",
										"{{album_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to delete an album with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/album/9999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"album",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully deletes a newspaper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/newspaper/{{newspaper_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"newspaper",
										"{{newspaper_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to delete newspaper with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/newspaper/9999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"newspaper",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successfully deletes an archive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/archive/{{archive_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"archive",
										"{{archive_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fails to delete an archive with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/archive/9999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"archive",
										"9999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reservation",
					"item": [
						{
							"name": "Successfully delete reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservation/{{reservation_id}}/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservation",
										"{{reservation_id}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fail to delete reservation with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/reservation/9999999",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"reservation",
										"9999999"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/test",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"test"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "https://onlinelibrary-backend-ci-05a.herokuapp.com"
		},
		{
			"key": "LOH_DATE",
			"value": "2020-03-03"
		},
		{
			"key": "member_id",
			"value": ""
		},
		{
			"key": "member_username",
			"value": ""
		},
		{
			"key": "member_password",
			"value": ""
		},
		{
			"key": "member_email_address",
			"value": ""
		},
		{
			"key": "bookInfo_id",
			"value": ""
		},
		{
			"key": "movieInfo_id",
			"value": ""
		},
		{
			"key": "albumInfo_id",
			"value": ""
		},
		{
			"key": "newspaperInfo_id",
			"value": ""
		},
		{
			"key": "archiveInfo_id",
			"value": ""
		},
		{
			"key": "librarian_id",
			"value": ""
		},
		{
			"key": "librarian_full_name",
			"value": ""
		},
		{
			"key": "librarian_username",
			"value": ""
		},
		{
			"key": "librarian_password",
			"value": ""
		},
		{
			"key": "librarian2_id",
			"value": ""
		},
		{
			"key": "librarian2_username",
			"value": ""
		},
		{
			"key": "book_id",
			"value": ""
		},
		{
			"key": "movie_id",
			"value": ""
		},
		{
			"key": "album_id",
			"value": ""
		},
		{
			"key": "newspaper_id",
			"value": ""
		},
		{
			"key": "archive_id",
			"value": ""
		},
		{
			"key": "loan_id",
			"value": ""
		},
		{
			"key": "reservation_id",
			"value": ""
		},
		{
			"key": "holiday_id",
			"value": ""
		},
		{
			"key": "LOH_id",
			"value": ""
		},
		{
			"key": "librarian_id_for_shift",
			"value": ""
		},
		{
			"key": "librarian_shift_id",
			"value": ""
		}
	]
}